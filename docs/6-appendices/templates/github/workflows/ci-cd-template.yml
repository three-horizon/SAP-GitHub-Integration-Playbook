# SAP ABAP CI/CD Workflow Template
#
# This workflow template provides a comprehensive CI/CD pipeline for SAP ABAP development
# integrated with GitHub. It includes stages for syntax checking, code quality analysis,
# unit testing, and deployment to SAP systems.
#
# How to use:
# 1. Copy this file to your repository's .github/workflows directory
# 2. Modify the environment variables and settings to match your SAP landscape
# 3. Configure the required secrets in your GitHub repository

name: SAP ABAP CI/CD Pipeline

# Define when this workflow will run
on:
  # Trigger the workflow on push events to these branches
  push:
    branches: [ main, develop ]
  
  # Trigger the workflow on pull request events for these branches
  pull_request:
    branches: [ main, develop ]
    
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      target_system:
        description: 'Target SAP system (DEV, QAS, PRD)'
        required: true
        default: 'DEV'
      transport_request:
        description: 'Transport request number (leave empty to create new)'
        required: false

# Environment variables used throughout the workflow
env:
  # Default SAP system IDs - customize according to your landscape
  DEV_SYSTEM_ID: 'DEV'
  QAS_SYSTEM_ID: 'QAS'
  PRD_SYSTEM_ID: 'PRD'
  
  # Default package 
  ABAP_PACKAGE: 'ZGITHUB_INTEGRATION'
  
  # Language settings
  LANGUAGE: 'E' # English

# A workflow run is made up of one or more jobs
jobs:
  # Syntax checking and static code analysis
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install ABAP tools
        run: npm install -g abaplint
      
      - name: Run ABAP Lint
        run: abaplint
      
      - name: Upload analysis results
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-results
          path: ./abaplint-results.xml
          retention-days: 7
  
  # Test ABAP code (unit tests)
  test:
    name: Unit Tests
    needs: analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # In a real implementation, this would connect to SAP system to run unit tests
      # This is a placeholder step 
      - name: Mock ABAP unit tests
        run: |
          mkdir -p test-results
          echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite tests=\"3\" failures=\"0\" errors=\"0\" skipped=\"0\"><testcase classname=\"ZCL_TEST_CLASS\" name=\"TEST_METHOD_1\"/><testcase classname=\"ZCL_TEST_CLASS\" name=\"TEST_METHOD_2\"/><testcase classname=\"ZCL_TEST_CLASS\" name=\"TEST_METHOD_3\"/></testsuite></testsuites>" > test-results/results.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./test-results
          retention-days: 7
  
  # Deploy to DEV system
  deploy-dev:
    name: Deploy to DEV
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [analyze, test]
    runs-on: ubuntu-latest
    environment: 
      name: development
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # In a real implementation, this would connect to SAP system and deploy using abapGit
      # Below is a placeholder that simulates the deployment process
      - name: Deploy to DEV SAP system
        id: deploy
        env:
          SAP_HOST: ${{ secrets.SAP_DEV_HOST }}
          SAP_PORT: ${{ secrets.SAP_DEV_PORT }}
          SAP_CLIENT: ${{ secrets.SAP_DEV_CLIENT }}
          SAP_USER: ${{ secrets.SAP_DEV_USER }}
          SAP_PASSWORD: ${{ secrets.SAP_DEV_PASSWORD }}
          TRANSPORT_REQUEST: ${{ github.event.inputs.transport_request }}
        run: |
          echo "Deploying to DEV system at $SAP_HOST:$SAP_PORT client $SAP_CLIENT"
          echo "Package: $ABAP_PACKAGE"
          
          # Create fake transport request number if not provided
          if [ -z "$TRANSPORT_REQUEST" ]; then
            TRANSPORT_REQUEST="DEVK$(date +%Y%m%d%H%M%S)"
            echo "Created new transport request: $TRANSPORT_REQUEST"
          fi
          
          # Simulate pushing code to SAP system using abapGit
          echo "Pushing code changes via abapGit..."
          echo "Transport request: $TRANSPORT_REQUEST"
          
          # Set output for environment URL
          echo "deployment_url=https://example.com/sap/bc/gui/sap/its/webgui?sap-client=$SAP_CLIENT" >> $GITHUB_OUTPUT
          
          # Simulate successful deployment
          echo "Deployment to DEV completed successfully!"
  
  # Deploy to QAS system
  deploy-qas:
    name: Deploy to QAS
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_system == 'QAS')
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: 
      name: quality
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # In a real implementation, this would transport the changes to QAS system
      # Below is a placeholder that simulates the transport process
      - name: Transport to QAS SAP system
        id: deploy
        env:
          SAP_HOST: ${{ secrets.SAP_QAS_HOST }}
          SAP_PORT: ${{ secrets.SAP_QAS_PORT }}
          SAP_CLIENT: ${{ secrets.SAP_QAS_CLIENT }}
          SAP_USER: ${{ secrets.SAP_QAS_USER }}
          SAP_PASSWORD: ${{ secrets.SAP_QAS_PASSWORD }}
        run: |
          echo "Transporting to QAS system at $SAP_HOST:$SAP_PORT client $SAP_CLIENT"
          
          # Simulate releasing transport to QAS
          echo "Releasing transport to QAS..."
          
          # Set output for environment URL
          echo "deployment_url=https://example.com/sap/bc/gui/sap/its/webgui?sap-client=$SAP_CLIENT" >> $GITHUB_OUTPUT
          
          # Simulate successful transport
          echo "Transport to QAS completed successfully!"
  
  # Deploy to PRD system
  deploy-prd:
    name: Deploy to PRD
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.target_system == 'PRD'
    needs: deploy-qas
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.deployment_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # In a real implementation, this would transport the changes to PRD system
      # Below is a placeholder that simulates the transport process
      - name: Transport to PRD SAP system
        id: deploy
        env:
          SAP_HOST: ${{ secrets.SAP_PRD_HOST }}
          SAP_PORT: ${{ secrets.SAP_PRD_PORT }}
          SAP_CLIENT: ${{ secrets.SAP_PRD_CLIENT }}
          SAP_USER: ${{ secrets.SAP_PRD_USER }}
          SAP_PASSWORD: ${{ secrets.SAP_PRD_PASSWORD }}
        run: |
          echo "Transporting to PRD system at $SAP_HOST:$SAP_PORT client $SAP_CLIENT"
          
          # Simulate releasing transport to PRD
          echo "Releasing transport to PRD..."
          
          # Set output for environment URL
          echo "deployment_url=https://example.com/sap/bc/gui/sap/its/webgui?sap-client=$SAP_CLIENT" >> $GITHUB_OUTPUT
          
          # Simulate successful transport
          echo "Transport to PRD completed successfully!"
  
  # Notify about deployment results
  notify:
    name: Send Notifications
    if: always()
    needs: [deploy-dev, deploy-qas, deploy-prd]
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "Deployment completed successfully"
          # In a real implementation, this would send notifications to Teams, Slack, email, etc.
      
      - name: Notify on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "Deployment failed"
          # In a real implementation, this would send notifications to Teams, Slack, email, etc.
