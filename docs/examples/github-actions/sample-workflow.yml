# SAP Development Workflow
# This workflow demonstrates the automated process for ABAP code changes 
# from development to quality assurance to production

name: SAP ABAP CI/CD Pipeline

on:
  push:
    branches: [ feature/*, bugfix/*, hotfix/* ]
  pull_request:
    branches: [ dev, qas, main ]
  workflow_dispatch:
    inputs:
      transport_request:
        description: 'SAP Transport Request ID'
        required: false
        default: ''
      manual_action:
        description: 'Manual action to trigger'
        required: false
        type: choice
        options:
          - none
          - sync-sap-to-git
          - create-transport
          - release-transport
        default: 'none'

# Environment variables used across multiple jobs
env:
  SAP_API_ENDPOINT: ${{ secrets.SAP_API_ENDPOINT }}
  APIM_SUBSCRIPTION_KEY: ${{ secrets.APIM_SUBSCRIPTION_KEY }}
  # Default transport request ID (can be overridden by workflow_dispatch input)
  TRANSPORT_REQUEST: ${{ github.event.inputs.transport_request || '' }}

jobs:
  # Job 1: Validate ABAP code syntax and quality
  abap-lint:
    name: ABAP Lint and Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      # Example of an ABAP linting tool (abaplint) setup
      - name: Install abaplint
        run: npm install -g @abaplint/cli
      
      - name: Run ABAP Lint
        run: abaplint
        
      - name: Custom ABAP Code Quality Checks
        # This is a custom script that performs additional ABAP-specific quality checks
        run: node ./scripts/validate-abap-quality.js
        
  # Job 2: Synchronize code with SAP system (if triggered manually)
  sync-to-sap:
    name: Synchronize with SAP System
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.manual_action == 'sync-sap-to-git'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure Authentication
        # Set up authentication for API Management
        run: |
          echo "Setting up API Management authentication..."
          echo "APIM_TOKEN=$(./scripts/get-apim-token.sh)" >> $GITHUB_ENV
      
      - name: Identify SAP Package
        # Determine SAP package from repository structure
        run: |
          PACKAGE=$(grep -r "DEVC" --include="*.xml" . | head -1 | sed 's/.*<DEVC>\\(.*\\)<\/DEVC>.*/\\1/')
          echo "SAP_PACKAGE=$PACKAGE" >> $GITHUB_ENV
          
      - name: Pull latest from SAP
        # Use APIM to call abapGit APIs to synchronize
        run: |
          echo "Synchronizing from SAP to Git..."
          curl -X POST "$SAP_API_ENDPOINT/abapgit/pull" \
            -H "Content-Type: application/json" \
            -H "Ocp-Apim-Subscription-Key: $APIM_SUBSCRIPTION_KEY" \
            -H "Authorization: Bearer $APIM_TOKEN" \
            -d '{
              "package": "${{ env.SAP_PACKAGE }}",
              "transportRequest": "${{ env.TRANSPORT_REQUEST }}",
              "commitMessage": "Sync from SAP system ${{ secrets.SAP_SYSTEM_ID }}"
            }'
      
      - name: Commit changes to repository
        run: |
          git config --global user.name 'SAP Integration Bot'
          git config --global user.email 'sap-bot@example.com'
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Sync from SAP system ${{ secrets.SAP_SYSTEM_ID }} [skip ci]"
            git push
          else
            echo "No changes detected"
          fi
          
  # Job 3: Create transport request in SAP
  create-transport:
    name: Create SAP Transport Request
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.action == 'opened' && github.base_ref == 'dev') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.manual_action == 'create-transport')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure Authentication
        run: |
          echo "Setting up API Management authentication..."
          echo "APIM_TOKEN=$(./scripts/get-apim-token.sh)" >> $GITHUB_ENV
      
      - name: Create Transport Request
        id: create_transport
        run: |
          response=$(curl -X POST "$SAP_API_ENDPOINT/transport/create" \
            -H "Content-Type: application/json" \
            -H "Ocp-Apim-Subscription-Key: $APIM_SUBSCRIPTION_KEY" \
            -H "Authorization: Bearer $APIM_TOKEN" \
            -d '{
              "description": "Changes from GitHub PR #${{ github.event.pull_request.number || github.run_id }}",
              "owner": "${{ secrets.SAP_TECHNICAL_USER }}",
              "targetSystem": "QAS"
            }')
            
          echo "Response: $response"
          transport_id=$(echo $response | jq -r '.transportId')
          echo "TRANSPORT_ID=$transport_id" >> $GITHUB_ENV
          echo "transport_id=$transport_id" >> $GITHUB_OUTPUT
          
      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ“‹ SAP Transport Request created: ${{ steps.create_transport.outputs.transport_id }}`
            })
            
      - name: Apply Transport Request to Files
        run: |
          echo "Updating files with Transport Request ID..."
          ./scripts/apply-transport-to-files.sh "${{ steps.create_transport.outputs.transport_id }}"
          
          git config --global user.name 'SAP Integration Bot'
          git config --global user.email 'sap-bot@example.com'
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "Apply Transport Request ${{ steps.create_transport.outputs.transport_id }} [skip ci]"
            git push
          else
            echo "No changes needed in files"
          fi
          
  # Job 4: Push changes to SAP
  push-to-sap:
    name: Push Changes to SAP
    runs-on: ubuntu-latest
    needs: [abap-lint]
    if: |
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.manual_action == 'none' || github.event.inputs.manual_action == ''))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure Authentication
        run: |
          echo "Setting up API Management authentication..."
          echo "APIM_TOKEN=$(./scripts/get-apim-token.sh)" >> $GITHUB_ENV
      
      - name: Extract Transport Request ID
        run: |
          if [[ -n "${{ env.TRANSPORT_REQUEST }}" ]]; then
            echo "Using provided transport request: ${{ env.TRANSPORT_REQUEST }}"
            echo "TRANSPORT_ID=${{ env.TRANSPORT_REQUEST }}" >> $GITHUB_ENV
          else
            # Extract Transport ID from last commit message or files
            transport_id=$(grep -r "REQUEST=" --include="*.xml" . | head -1 | sed 's/.*REQUEST="\\(.*\\)".*/\\1/')
            if [[ -n "$transport_id" ]]; then
              echo "Extracted transport request: $transport_id"
              echo "TRANSPORT_ID=$transport_id" >> $GITHUB_ENV
            else
              echo "No transport request found. Creating a new one..."
              response=$(curl -X POST "$SAP_API_ENDPOINT/transport/create" \
                -H "Content-Type: application/json" \
                -H "Ocp-Apim-Subscription-Key: $APIM_SUBSCRIPTION_KEY" \
                -H "Authorization: Bearer $APIM_TOKEN" \
                -d '{
                  "description": "Changes from GitHub commit ${{ github.sha }}",
                  "owner": "${{ secrets.SAP_TECHNICAL_USER }}",
                  "targetSystem": "QAS"
                }')
                
              transport_id=$(echo $response | jq -r '.transportId')
              echo "Created new transport request: $transport_id"
              echo "TRANSPORT_ID=$transport_id" >> $GITHUB_ENV
            fi
          fi
      
      - name: Push Changes to SAP
        run: |
          echo "Pushing changes to SAP..."
          curl -X POST "$SAP_API_ENDPOINT/abapgit/push" \
            -H "Content-Type: application/json" \
            -H "Ocp-Apim-Subscription-Key: $APIM_SUBSCRIPTION_KEY" \
            -H "Authorization: Bearer $APIM_TOKEN" \
            -d '{
              "transportRequest": "${{ env.TRANSPORT_ID }}",
              "commitId": "${{ github.sha }}",
              "validateOnly": false
            }'
            
      - name: Update Deployment Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{ github.sha }}",
              environment: "SAP-DEV",
              auto_merge: false,
              required_contexts: [],
              description: "Deployed to SAP DEV with transport ${{ env.TRANSPORT_ID }}"
            }).then(response => {
              github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: response.data.id,
                state: "success",
                description: "Successfully deployed to SAP DEV"
              });
            });
  
  # Job 5: Release transport to QAS
  release-transport:
    name: Release Transport to QAS
    runs-on: ubuntu-latest
    needs: [push-to-sap]
    if: |
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.base_ref == 'qas') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.manual_action == 'release-transport')
    
    steps:
      - name: Configure Authentication
        run: |
          echo "Setting up API Management authentication..."
          echo "APIM_TOKEN=$(./scripts/get-apim-token.sh)" >> $GITHUB_ENV
          
      - name: Release Transport
        run: |
          transport_id="${{ env.TRANSPORT_REQUEST }}"
          if [[ -z "$transport_id" ]]; then
            # If not specified, get the most recent transport
            response=$(curl -X GET "$SAP_API_ENDPOINT/transport/list?status=D&limit=1" \
              -H "Ocp-Apim-Subscription-Key: $APIM_SUBSCRIPTION_KEY" \
              -H "Authorization: Bearer $APIM_TOKEN")
            
            transport_id=$(echo $response | jq -r '.transports[0].id')
            echo "Using most recent transport: $transport_id"
          fi
          
          if [[ -n "$transport_id" ]]; then
            echo "Releasing transport $transport_id to QAS..."
            curl -X POST "$SAP_API_ENDPOINT/transport/release" \
              -H "Content-Type: application/json" \
              -H "Ocp-Apim-Subscription-Key: $APIM_SUBSCRIPTION_KEY" \
              -H "Authorization: Bearer $APIM_TOKEN" \
              -d '{
                "transportId": "'"$transport_id"'",
                "targetSystem": "QAS"
              }'
          else
            echo "No transport ID found. Cannot release."
            exit 1
          fi
          
      - name: Update Deployment Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "${{ github.sha }}",
              environment: "SAP-QAS",
              auto_merge: false,
              required_contexts: [],
              description: "Released to SAP QAS with transport ${{ env.TRANSPORT_ID || env.TRANSPORT_REQUEST }}"
            }).then(response => {
              github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: response.data.id,
                state: "success",
                description: "Successfully released to SAP QAS"
              });
            });

# Additional jobs for production deployment would follow a similar pattern
# but with appropriate conditions and approvals
