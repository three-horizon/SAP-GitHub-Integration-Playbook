<policies>
  <inbound>
    <!-- Authentication and Authorization -->
    <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
      <openid-config url="https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration" />
      <audiences>
        <audience>api://sap-github-integration</audience>
      </audiences>
      <required-claims>
        <claim name="roles" match="any">
          <value>SAP.Integration.Admin</value>
          <value>SAP.Integration.Developer</value>
        </claim>
      </required-claims>
    </validate-jwt>

    <!-- Validate Subscription Key -->
    <check-header name="Ocp-Apim-Subscription-Key" failed-check-httpcode="401" failed-check-error-message="Subscription key is missing or invalid." ignore-case="true" />
    
    <!-- IP Filtering -->
    <ip-filter action="allow">
      <!-- GitHub Enterprise IPs -->
      <address>192.168.1.0/24</address>
      <!-- SAP System IPs -->
      <address>192.168.2.0/24</address>
      <!-- Corporate Network IPs -->
      <address>10.0.0.0/8</address>
    </ip-filter>
    
    <!-- Rate Limiting -->
    <rate-limit-by-key calls="10" renewal-period="60" counter-key="@(context.Subscription.Id)" />
    
    <!-- Enhanced Security Headers -->
    <set-header name="X-Content-Type-Options" exists-action="override">
      <value>nosniff</value>
    </set-header>
    <set-header name="X-XSS-Protection" exists-action="override">
      <value>1; mode=block</value>
    </set-header>
    <set-header name="X-Frame-Options" exists-action="override">
      <value>DENY</value>
    </set-header>
    <set-header name="Content-Security-Policy" exists-action="override">
      <value>default-src 'self'</value>
    </set-header>
    
    <!-- Request Validation -->
    <choose>
      <when condition="@(context.Request.Method == "POST" && context.Request.Url.Path.Contains("/abapgit/push"))">
        <!-- Validate GitHub Push Request -->
        <validate-content type="application/json" validate-as="json" />
        <check-header name="X-GitHub-Event" failed-check-httpcode="400" failed-check-error-message="Missing GitHub event header." ignore-case="true" />
        <!-- SAP Transport Request ID Validation -->
        <set-variable name="transportRequest" value="@(context.Request.Body.As<JObject>()["transportRequest"].ToString())" />
        <choose>
          <when condition="@(!string.IsNullOrEmpty((string)context.Variables["transportRequest"]) && 
                          !System.Text.RegularExpressions.Regex.IsMatch((string)context.Variables["transportRequest"], "^[A-Z0-9]{3}K[0-9]{6}$"))">
            <return-response>
              <set-status code="400" reason="Bad Request" />
              <set-body>{"error": "Invalid SAP transport request format."}</set-body>
            </return-response>
          </when>
        </choose>
      </when>
    </choose>
    
    <!-- Add Correlation ID for Tracing -->
    <set-variable name="correlationId" value="@(Guid.NewGuid().ToString())" />
    <set-header name="X-Correlation-ID" exists-action="override">
      <value>@(context.Variables.GetValueOrDefault<string>("correlationId"))</value>
    </set-header>
    
    <!-- Log Request for Security Monitoring -->
    <log-to-eventhub logger-id="sap-github-logger" partition-id="0">
      @{
        var body = context.Request.Body?.As<string>(preserveContent: true);
        var bodySize = (body != null) ? body.Length : 0;
        var sensitizedBody = (bodySize > 1000) ? "[Body content too large]" : body;
        var headers = context.Request.Headers
                              .Where(h => !h.Key.Equals("Authorization", StringComparison.OrdinalIgnoreCase) && 
                                         !h.Key.Equals("Ocp-Apim-Subscription-Key", StringComparison.OrdinalIgnoreCase))
                              .ToDictionary(h => h.Key, h => string.Join(", ", h.Value));
                               
        return new JObject(
          new JProperty("EventType", "Request"),
          new JProperty("CorrelationId", context.Variables.GetValueOrDefault<string>("correlationId")),
          new JProperty("Method", context.Request.Method),
          new JProperty("Url", context.Request.Url.ToString()),
          new JProperty("ClientIP", context.Request.IpAddress),
          new JProperty("Headers", JObject.FromObject(headers)),
          new JProperty("BodySize", bodySize),
          new JProperty("RequestTime", DateTime.UtcNow.ToString("o"))
        ).ToString();
      }
    </log-to-eventhub>
    
    <!-- Base URL Rewrite -->
    <choose>
      <when condition="@(context.Request.Url.Path.Contains("/github/"))">
        <set-backend-service base-url="https://api.github.enterprise.example.com" />
        <rewrite-uri template="@(context.Request.Url.Path.Replace("/github/", "/"))" />
      </when>
      <when condition="@(context.Request.Url.Path.Contains("/abapgit/"))">
        <choose>
          <when condition="@(context.Request.Url.Path.Contains("/dev/"))">
            <set-backend-service base-url="https://sap-dev.example.com" />
            <rewrite-uri template="@(context.Request.Url.Path.Replace("/abapgit/dev/", "/sap/bc/adt/abapgit/"))" />
          </when>
          <when condition="@(context.Request.Url.Path.Contains("/qas/"))">
            <set-backend-service base-url="https://sap-qas.example.com" />
            <rewrite-uri template="@(context.Request.Url.Path.Replace("/abapgit/qas/", "/sap/bc/adt/abapgit/"))" />
          </when>
          <when condition="@(context.Request.Url.Path.Contains("/prd/"))">
            <set-backend-service base-url="https://sap-prd.example.com" />
            <rewrite-uri template="@(context.Request.Url.Path.Replace("/abapgit/prd/", "/sap/bc/adt/abapgit/"))" />
          </when>
          <otherwise>
            <return-response>
              <set-status code="400" reason="Bad Request" />
              <set-body>{"error": "Invalid SAP system specified."}</set-body>
            </return-response>
          </otherwise>
        </choose>
      </when>
      <when condition="@(context.Request.Url.Path.Contains("/transport/"))">
        <choose>
          <when condition="@(context.Request.Url.Path.Contains("/dev/"))">
            <set-backend-service base-url="https://sap-dev.example.com" />
            <rewrite-uri template="@(context.Request.Url.Path.Replace("/transport/dev/", "/sap/bc/adt/cts/"))" />
          </when>
          <when condition="@(context.Request.Url.Path.Contains("/qas/"))">
            <set-backend-service base-url="https://sap-qas.example.com" />
            <rewrite-uri template="@(context.Request.Url.Path.Replace("/transport/qas/", "/sap/bc/adt/cts/"))" />
          </when>
          <when condition="@(context.Request.Url.Path.Contains("/prd/"))">
            <set-backend-service base-url="https://sap-prd.example.com" />
            <rewrite-uri template="@(context.Request.Url.Path.Replace("/transport/prd/", "/sap/bc/adt/cts/"))" />
          </when>
          <otherwise>
            <return-response>
              <set-status code="400" reason="Bad Request" />
              <set-body>{"error": "Invalid SAP system specified."}</set-body>
            </return-response>
          </otherwise>
        </choose>
      </when>
    </choose>
    
    <!-- Add SAP Authentication -->
    <authentication-basic username="{{sap-technical-user}}" password="{{sap-technical-password}}" />
  </inbound>
  
  <backend>
    <forward-request timeout="60" buffer-request-body="true" />
  </backend>
  
  <outbound>
    <!-- Transform SAP XML to JSON if needed -->
    <choose>
      <when condition="@(context.Response.StatusCode == 200 && context.Response.Headers.GetValueOrDefault("Content-Type", "").StartsWith("application/xml"))">
        <xml-to-json kind="direct" apply="always" consider-accept-header="false" />
      </when>
    </choose>
    
    <!-- Log Response for Security Monitoring -->
    <log-to-eventhub logger-id="sap-github-logger" partition-id="0">
      @{
        var body = context.Response.Body?.As<string>(preserveContent: true);
        var bodySize = (body != null) ? body.Length : 0;
        return new JObject(
          new JProperty("EventType", "Response"),
          new JProperty("CorrelationId", context.Variables.GetValueOrDefault<string>("correlationId")),
          new JProperty("StatusCode", context.Response.StatusCode),
          new JProperty("StatusReason", context.Response.StatusReason),
          new JProperty("Headers", JObject.FromObject(context.Response.Headers.ToDictionary(h => h.Key, h => string.Join(", ", h.Value)))),
          new JProperty("BodySize", bodySize),
          new JProperty("ResponseTime", DateTime.UtcNow.ToString("o"))
        ).ToString();
      }
    </log-to-eventhub>
    
    <!-- Remove SAP-specific headers -->
    <set-header name="X-sap-login-language" exists-action="delete" />
    <set-header name="SAP-PASSPORT" exists-action="delete" />
    <set-header name="X-sap-security-session" exists-action="delete" />
    
    <!-- Add Security Headers -->
    <set-header name="Strict-Transport-Security" exists-action="override">
      <value>max-age=31536000; includeSubDomains</value>
    </set-header>
  </outbound>
  
  <on-error>
    <!-- Log Error for Security Monitoring -->
    <log-to-eventhub logger-id="sap-github-logger" partition-id="0">
      @{
        return new JObject(
          new JProperty("EventType", "Error"),
          new JProperty("CorrelationId", context.Variables.GetValueOrDefault<string>("correlationId")),
          new JProperty("StatusCode", context.Response.StatusCode),
          new JProperty("ErrorSource", context.LastError.Source),
          new JProperty("ErrorReason", context.LastError.Reason),
          new JProperty("ErrorMessage", context.LastError.Message),
          new JProperty("ErrorScope", context.LastError.Scope),
          new JProperty("ErrorSection", context.LastError.Section),
          new JProperty("ErrorPath", context.LastError.Path),
          new JProperty("ErrorTime", DateTime.UtcNow.ToString("o"))
        ).ToString();
      }
    </log-to-eventhub>
    
    <!-- Return standardized error response -->
    <set-header name="Content-Type" exists-action="override">
      <value>application/json</value>
    </set-header>
    <set-body>
      @{
        return new JObject(
          new JProperty("error", new JObject(
            new JProperty("code", context.Response.StatusCode),
            new JProperty("message", context.LastError.Message),
            new JProperty("target", context.Request.Url.Path),
            new JProperty("details", new JArray(
              new JObject(
                new JProperty("code", context.LastError.Source),
                new JProperty("message", context.LastError.Reason),
                new JProperty("target", context.LastError.Path)
              )
            )),
            new JProperty("correlationId", context.Variables.GetValueOrDefault<string>("correlationId"))
          ))
        ).ToString();
      }
    </set-body>
  </on-error>
</policies>
