// SAP Transport Anomaly Detection
// Detects unusual SAP transport activities that may indicate unauthorized access or malicious behavior
// This query looks for:
// 1. Transports created outside normal business hours
// 2. Transports with an unusual number of objects
// 3. Transports created by users who typically don't create transports
// 4. Transports targeting unusual systems

// Custom Log table where SAP transport logs are stored
let SAPTransportLogs = 
    customSAPTransportLogs_CL | extend 
        TransportID = tostring(TransportID_s),
        TransportType = tostring(TransportType_s),
        TransportTarget = tostring(TransportTarget_s),
        TransportOwner = tostring(TransportOwner_s),
        TransportDescription = tostring(TransportDescription_s),
        ObjectCount = toint(ObjectCount_d),
        CreatedAt = todatetime(CreatedAt_t),
        ReleasedAt = todatetime(ReleasedAt_t),
        ImportedAt = todatetime(ImportedAt_t),
        ClientIP = tostring(ClientIP_s);

// API Management logs for SAP-GitHub integration
let APIMLogs = 
    AzureDiagnostics
    | where ResourceProvider == "MICROSOFT.APIMANAGEMENT" 
    | where Category == "GatewayLogs"
    | where OperationName has "transport"
    | extend 
        APIPath = tostring(requestUri_s),
        ClientIP = tostring(callerIpAddress),
        UserAgent = tostring(userAgent_s),
        StatusCode = toint(responseCode_d);

// GitHub webhook events logs (custom table)
let GitHubEvents = 
    customGitHubEvents_CL
    | where EventName_s has "transport" or PayloadContent_s has "transport"
    | extend 
        EventType = tostring(EventName_s),
        RepositoryName = tostring(RepositoryName_s),
        ActorName = tostring(ActorName_s),
        ClientIP = tostring(ClientIP_s);

// Define normal business hours (8 AM to 6 PM)
let BusinessHoursStart = 8;
let BusinessHoursEnd = 18;

// Get baseline transport activity by user
let UserTransportBaseline = 
    SAPTransportLogs
    | where TimeGenerated > ago(90d) and TimeGenerated < ago(1d)
    | summarize 
        TransportCount = count(),
        AvgObjectsPerTransport = avg(ObjectCount),
        StdDevObjectsPerTransport = stdev(ObjectCount),
        TargetSystems = make_set(TransportTarget),
        CommonTransportTypes = make_set(TransportType)
    by TransportOwner;

// Get unusual transports in the last 24 hours
let UnusualTransports = 
    SAPTransportLogs
    | where TimeGenerated > ago(24h)
    | extend 
        HourOfDay = datetime_part("Hour", CreatedAt),
        IsOutsideBusinessHours = HourOfDay < BusinessHoursStart or HourOfDay > BusinessHoursEnd,
        IsDuringWeekend = dayofweek(CreatedAt) == 0 or dayofweek(CreatedAt) == 6
    | join kind=leftouter UserTransportBaseline on TransportOwner
    | extend
        ObjectCountZScore = iff(StdDevObjectsPerTransport > 0, 
                             (ObjectCount - AvgObjectsPerTransport) / StdDevObjectsPerTransport, 
                             0),
        IsUnusualTargetSystem = array_length(TargetSystems) > 0 and not(array_contains(TargetSystems, TransportTarget)),
        IsUnusualTransportType = array_length(CommonTransportTypes) > 0 and not(array_contains(CommonTransportTypes, TransportType)),
        IsRareUserTransport = iff(TransportCount < 5, true, false)
    | where 
        IsOutsideBusinessHours or
        IsDuringWeekend or
        abs(ObjectCountZScore) > 2.5 or
        IsUnusualTargetSystem or
        IsUnusualTransportType or
        IsRareUserTransport
    | project 
        TimeGenerated,
        TransportID,
        TransportOwner,
        TransportTarget,
        TransportType,
        ObjectCount,
        CreatedAt,
        AnomalyReasons = pack_array(
            iff(IsOutsideBusinessHours, "Created outside business hours", ""),
            iff(IsDuringWeekend, "Created during weekend", ""),
            iff(abs(ObjectCountZScore) > 2.5, strcat("Unusual object count (", tostring(ObjectCount), " objects)"), ""),
            iff(IsUnusualTargetSystem, strcat("Unusual target system (", TransportTarget, ")"), ""),
            iff(IsUnusualTransportType, strcat("Unusual transport type (", TransportType, ")"), ""),
            iff(IsRareUserTransport, strcat("User rarely creates transports (", tostring(TransportCount), " in last 90 days)"), "")
        ),
        ClientIP;

// Correlate with API Management logs
let APICorrelatedTransports = 
    UnusualTransports
    | join kind=leftouter (
        APIMLogs
        | where TimeGenerated > ago(24h)
        | where APIPath has "transport"
        | extend ExtractedTransportID = extract("transportId=([A-Z0-9]{3}K[0-9]{6})", 1, APIPath)
        | where isnotempty(ExtractedTransportID)
        | project APITimeGenerated = TimeGenerated, APIPath, ExtractedTransportID, APIClientIP = ClientIP, UserAgent, StatusCode
    ) on $left.TransportID == $right.ExtractedTransportID
    | extend 
        CorrelatedWithAPI = isnotempty(APIPath),
        APILatency = iff(isnotempty(APIPath), datetime_diff("minute", TimeGenerated, APITimeGenerated), int(null));

// Correlate with GitHub events
let GitHubCorrelatedTransports = 
    APICorrelatedTransports
    | join kind=leftouter (
        GitHubEvents
        | where TimeGenerated > ago(24h)
        | extend ExtractedTransportID = extract("transportId=([A-Z0-9]{3}K[0-9]{6})", 1, PayloadContent_s)
        | where isnotempty(ExtractedTransportID)
        | project GitHubTimeGenerated = TimeGenerated, EventType, RepositoryName, ActorName, ExtractedTransportID, GitHubClientIP = ClientIP
    ) on $left.TransportID == $right.ExtractedTransportID
    | extend 
        CorrelatedWithGitHub = isnotempty(EventType),
        GitHubLatency = iff(isnotempty(EventType), datetime_diff("minute", APITimeGenerated, GitHubTimeGenerated), int(null)),
        IPMismatch = GitHubClientIP != APIClientIP and isnotempty(GitHubClientIP) and isnotempty(APIClientIP);

// Finalize and calculate risk score
GitHubCorrelatedTransports
| extend 
    // Calculate anomaly score based on factors
    AnomalyScore = 
        array_length(AnomalyReasons) * 10 +
        iff(not(CorrelatedWithAPI), 30, 0) +
        iff(not(CorrelatedWithGitHub), 25, 0) +
        iff(IPMismatch, 40, 0) +
        iff(abs(GitHubLatency) > 60, 15, 0),
    AnomalyReasons = array_concat(
        AnomalyReasons,
        pack_array(
            iff(not(CorrelatedWithAPI), "No matching API call found", ""),
            iff(not(CorrelatedWithGitHub), "No matching GitHub event found", ""),
            iff(IPMismatch, "IP address mismatch between GitHub and API call", ""),
            iff(abs(GitHubLatency) > 60, "Excessive delay between GitHub event and API call", "")
        )
    )
| where AnomalyScore > 30  // Only alert on high-risk anomalies
| extend 
    // Create more user-friendly reasons array by removing empty values
    CleanedReasons = array_where(AnomalyReasons, reason => isnotempty(reason))
| project 
    TimeGenerated,
    TransportID,
    TransportOwner,
    TransportTarget,
    TransportType,
    ObjectCount,
    CreatedAt,
    AnomalyScore,
    AnomalyReasons = CleanedReasons,
    CorrelatedWithAPI,
    CorrelatedWithGitHub,
    APIPath,
    APIClientIP,
    UserAgent,
    GitHubEventType = EventType,
    GitHubRepo = RepositoryName,
    GitHubActor = ActorName,
    GitHubClientIP,
    IPMismatch
| order by AnomalyScore desc
